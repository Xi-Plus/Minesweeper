
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import javax.swing.Timer;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author xiplus
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main2
     */
    public main() {
        initComponents();
        usercardlabel = new javax.swing.JLabel[]{usercard1, usercard2, usercard3, usercard4};
        botcardlabel = new javax.swing.JLabel[]{botcard1, botcard2, botcard3, botcard4};
        timer = new Timer(2000, 
                new ActionListener() {
                    @Override public void actionPerformed(ActionEvent e) {
                        botgetcard();
                    }
                }
        );
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newcard = new javax.swing.JLabel();
        restartbtn = new javax.swing.JButton();
        userLabel = new javax.swing.JLabel();
        botLabel = new javax.swing.JLabel();
        usercard1 = new javax.swing.JLabel();
        usercard2 = new javax.swing.JLabel();
        usercard3 = new javax.swing.JLabel();
        usercard4 = new javax.swing.JLabel();
        botcard1 = new javax.swing.JLabel();
        botcard2 = new javax.swing.JLabel();
        botcard3 = new javax.swing.JLabel();
        botcard4 = new javax.swing.JLabel();
        userstopcard = new javax.swing.JButton();
        showhidecard = new javax.swing.JButton();
        usercardsum = new javax.swing.JLabel();
        botcardsum = new javax.swing.JLabel();
        gamestatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("1105108138 黃宣喻");

        newcard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/back.gif"))); // NOI18N
        newcard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newcardMouseClicked(evt);
            }
        });

        restartbtn.setFont(new java.awt.Font("新細明體", 0, 24)); // NOI18N
        restartbtn.setText("遊戲開始");
        restartbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                restartbtnMouseClicked(evt);
            }
        });

        userLabel.setFont(new java.awt.Font("新細明體", 1, 24)); // NOI18N
        userLabel.setForeground(new java.awt.Color(0, 0, 255));
        userLabel.setText("玩家");

        botLabel.setFont(new java.awt.Font("新細明體", 1, 24)); // NOI18N
        botLabel.setForeground(new java.awt.Color(0, 0, 255));
        botLabel.setText("電腦");

        usercard1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usercard1MouseClicked(evt);
            }
        });

        userstopcard.setFont(new java.awt.Font("新細明體", 0, 24)); // NOI18N
        userstopcard.setText("不再補牌");
        userstopcard.setEnabled(false);
        userstopcard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userstopcardMouseClicked(evt);
            }
        });

        showhidecard.setFont(new java.awt.Font("新細明體", 0, 24)); // NOI18N
        showhidecard.setText("掀開暗牌");
        showhidecard.setEnabled(false);
        showhidecard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showhidecardMouseClicked(evt);
            }
        });

        usercardsum.setFont(new java.awt.Font("新細明體", 1, 24)); // NOI18N
        usercardsum.setForeground(new java.awt.Color(255, 153, 0));

        botcardsum.setFont(new java.awt.Font("新細明體", 1, 24)); // NOI18N
        botcardsum.setForeground(new java.awt.Color(255, 153, 0));

        gamestatus.setFont(new java.awt.Font("新細明體", 1, 24)); // NOI18N
        gamestatus.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botcard1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botcard2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botcard3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(botcard4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newcard, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(restartbtn)
                        .addGap(18, 18, 18)
                        .addComponent(gamestatus))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userLabel)
                            .addComponent(usercard1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showhidecard)
                                .addGap(18, 18, 18)
                                .addComponent(botcardsum))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(userstopcard)
                                .addGap(18, 18, 18)
                                .addComponent(usercardsum))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(usercard2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(usercard3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(usercard4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(131, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(newcard, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(restartbtn)
                            .addComponent(gamestatus, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(userstopcard)
                    .addComponent(usercardsum, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usercard2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usercard1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(botLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usercard3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usercard4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(showhidecard)
                            .addComponent(botcardsum, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botcard2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botcard1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botcard3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botcard4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newcardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newcardMouseClicked
        if(usercardcnt < 1) return;
        if(!enablegetcard) return;
        System.out.println("newcard");
        usergetcard();
    }//GEN-LAST:event_newcardMouseClicked

    private void restartbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_restartbtnMouseClicked
        System.out.println("restart");
        if(usercardcnt > 0) {
            clearGame();
        } else {
            startGame();
        }
    }//GEN-LAST:event_restartbtnMouseClicked

    private void userstopcardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userstopcardMouseClicked
        if(enablegetcard && usercardcnt >= 2) {
            System.out.println("stop get card");
            startbotgetcard();
        }
    }//GEN-LAST:event_userstopcardMouseClicked

    private void showhidecardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showhidecardMouseClicked
        if(enableunhidecard) {
            System.out.println("show bot hide card");
            enableunhidecard =false;
            showhidecard.setEnabled(false);
            
            botcard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/"+botcards[0]+".gif")));
            showbotsum();
        }
    }//GEN-LAST:event_showhidecardMouseClicked

    private void usercard1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usercard1MouseClicked
        if(usercardcnt < 1) return;
        System.out.println("show/hide user hide card");
        showusersum();
        if(usercard1hide) {
            usercard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/"+usercards[0]+".gif")));
        } else {
            usercard1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/back.gif")));
        }
        usercard1hide = !usercard1hide;
    }//GEN-LAST:event_usercard1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel botLabel;
    private javax.swing.JLabel botcard1;
    private javax.swing.JLabel botcard2;
    private javax.swing.JLabel botcard3;
    private javax.swing.JLabel botcard4;
    private javax.swing.JLabel botcardsum;
    private javax.swing.JLabel gamestatus;
    private javax.swing.JLabel newcard;
    private javax.swing.JButton restartbtn;
    private javax.swing.JButton showhidecard;
    private javax.swing.JLabel userLabel;
    private javax.swing.JLabel usercard1;
    private javax.swing.JLabel usercard2;
    private javax.swing.JLabel usercard3;
    private javax.swing.JLabel usercard4;
    private javax.swing.JLabel usercardsum;
    private javax.swing.JButton userstopcard;
    // End of variables declaration//GEN-END:variables
    
    private Timer timer;
    private int cardpos;
    private int usercards[] = new int[]{0, 0, 0, 0};
    private javax.swing.JLabel usercardlabel[];
    private int usercardcnt;
    private int botcards[] = new int[]{0, 0, 0, 0};
    private javax.swing.JLabel botcardlabel[];
    private int botcardcnt;
    private boolean usercard1hide;
    private int cards[];
    private boolean enablegetcard;
    private boolean enableunhidecard;
    
    private void clearGame() {
        System.out.println("clear game");
        
        timer.stop();
        
        restartbtn.setText("遊戲開始");
        for(int i=0; i<4; i++) {
            usercardlabel[i].setIcon(null);
            botcardlabel[i].setIcon(null);
        }
        cardpos = 0;
        usercardcnt = 0;
        botcardcnt = 0;
        usercardsum.setText(null);
        botcardsum.setText(null);
        gamestatus.setText(null);
        userstopcard.setEnabled(false);
        showhidecard.setEnabled(false);
    }
    
    private void startGame() {
        System.out.println("start game");
        usercard1hide = true;
        enablegetcard = true;
        enableunhidecard = false;
        
        restartbtn.setText("我要重玩");
        
        List<Integer> s = new ArrayList<Integer>();
        for (int i = 1; i <= 13; i++) {
            s.add(i);
        }
        Collections.shuffle(s);
        cards = s.stream().mapToInt(i->i).toArray();
        for (int i = 0; i < 13; i++) {
            System.out.print(cards[i]+" ");
        }
        System.out.println();
        
        giveusercard(false);
        givebotcard(false);
    }

    private void usergetcard() {
        giveusercard(true);
        if(usercardcnt == 2) {
            userstopcard.setEnabled(true);
            givebotcard(true);
        }
        int sum = showusersum();
        if(usercardcnt == 2) {
            if(checkuserblackjack() && checkbotblackjack()) {
                enableunhide();
                gameover(0);
                return;
            }
            if(checkuserblackjack()) {
                enableunhide();
                gameover(1);
                 return;
            }
            if(checkbotblackjack()) {
                enableunhide();
                gameover(-1);
                return;
            }
        }
        if (sum > 21) {
            gameover(-1);
            enableunhide();
            return;
        }
        if(usercardcnt == 4) {
            startbotgetcard();
        }
    }
    
    private void startbotgetcard() {
        enablegetcard = false;
        userstopcard.setEnabled(false);
        botcardlabel[0].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/"+botcards[0]+".gif")));
        showbotsum();
        timer.start();
    }
    
    private void botgetcard() {
        System.out.println("botgetcard");
        int sum = showbotsum();
        if(sum >= 17 || botcardcnt == 4) {
            System.out.println("bot stop card");
            timer.stop();
            int usersum = showusersum();
            if(sum > usersum) {
                gameover(-1);
            } else if (sum < usersum) {
                gameover(1);
            } else {
                gameover(0);
            }
            return;
        }
        givebotcard(true);
        sum = showbotsum();
        if (sum > 21) {
            System.out.println("bot stop card, bot lose");
            timer.stop();
            gameover(1);
            return;
        }
        if (sum >= 17 || botcardcnt == 4) {
            System.out.println("bot stop card, check result");
            timer.stop();
            int usersum = showusersum();
            if(sum > usersum) {
                gameover(-1);
            } else if (sum < usersum) {
                gameover(1);
            } else {
                gameover(0);
            }
        }
    }

    private void giveusercard(boolean show) {
        System.out.println("give user card "+usercardcnt+" "+cardpos);
        usercards[usercardcnt] = cards[cardpos];
        if(show) {
            usercardlabel[usercardcnt].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/"+usercards[usercardcnt]+".gif")));
        } else {
            usercardlabel[usercardcnt].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/back.gif")));
        }
        usercardcnt++;
        cardpos++;
    }

    private void givebotcard(boolean show) {
        System.out.println("give bot card "+botcardcnt+" "+cardpos);
        botcards[botcardcnt] = cards[cardpos];
        if(show) {
            botcardlabel[botcardcnt].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/"+botcards[botcardcnt]+".gif")));
        } else {
            botcardlabel[botcardcnt].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/back.gif")));
        }
        botcardcnt++;
        cardpos++;
    }
    
    private boolean checkuserblackjack() {
        if(num2point(usercards[0]) == 1 && num2point(usercards[1]) == 10 ||
           num2point(usercards[0]) == 10 && num2point(usercards[1]) == 1) {
            return true;
        }
        return false;
    }
    
    private boolean checkbotblackjack() {
        if(num2point(botcards[0]) == 1 && num2point(botcards[1]) == 10 ||
           num2point(botcards[0]) == 10 && num2point(botcards[1]) == 1) {
            return true;
        }
        return false;
    }
    
    private int showusersum() {
        int sum = 0;
        for(int i = 0; i < usercardcnt; i++ ) {
            sum += num2point(usercards[i]);
        }
        if(checkuserblackjack()) sum = 21;
        usercardsum.setText(sum+"點");
        return sum;
    }
    
    private int showbotsum() {
        int sum = 0;
        for(int i = 0; i < botcardcnt; i++ ) {
            sum += num2point(botcards[i]);
        }
        if(checkbotblackjack()) sum = 21;
        botcardsum.setText(sum+"點");
        return sum;
    }
    
    private int num2point(int num) {
        if(num >= 10) {
            return 10;
        }
        return num;
    }

    private void gameover(int n) {
        if(n == 1) {
            gamestatus.setText("*** 恭喜，玩家贏 ***");
        } else if(n == -1) {
            gamestatus.setText("*** 電腦贏了 ***");
        } else {
            gamestatus.setText("*** 雙方平手 ***");
        }
        userstopcard.setEnabled(false);
        enablegetcard = false;
    }
    
    private void enableunhide() {
        enableunhidecard = true;
        showhidecard.setEnabled(true);
    }

}
